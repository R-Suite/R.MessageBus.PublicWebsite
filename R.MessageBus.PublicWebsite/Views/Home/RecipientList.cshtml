@{
    ViewBag.Title = "Recipient List";
}
<div class="container-fluid">
    <div class="row row-offcanvas row-offcanvas-left">
        <div class="col-xs-6 col-sm-3 sidebar-offcanvas" id="sidebar" role="navigation">
            <div class="well sidebar-nav">
                <ul class="nav nav-list">
                    <li>
                        <a href="#recipientList">Recipient List</a>
                    </li>
                    <li>
                        <a href="#message">Message Definition</a>
                    </li>
                    <li>
                        <a href="#sending">Sending messages to recipients</a>
                    </li>
                    <li>
                        <a href="#sendingrecievingsynch">Sending messages to recipients and receiving synchronous replies</a>
                    </li>
                    <li>
                        <a href="#sendingrecievingasynch">Sending messages to recipients and receiving asynchronous replies</a>
                    </li>
                    <li>
                        <a href="#consuming">Consuming Messages</a>
                    </li>
                    <li>
                        <a href="#telluswhatyouthink">Tell Us What You Think!</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-xs-12 col-sm-9">

          <h2 id="recipientList">Recipient List</h2>
          <p style="margin-top:30px;">
          <img class="img-responsive" src="scripts/images/RecipientList.gif" />
          </p>
          <p>
          With R.MessageBus implementation of Recipient List you can route a message to a list of dynamically specified recipients. You can choose to
          wait for synchronous reply from each recipient or provide a callback method for asynchronous replies. 
          The default timeout for the synchrounous replies is 10 seconds, but can be overriden on per-request basis.
           </p>
          <p>
          <i>See Enterprise Integration Patterns (G. Hohpe, B. Woolf, 2009: 249-258) for more details.</i>
          </p>
          <h3 id="message">Message Definitions</h3>

<pre><code class="cs">public class RecipientListMessage : Message
{
    public RecipientListMessage(Guid correlationId) : base(correlationId) { }
    public bool SendReply { get; set; }
}

public class RecipientListResponse : Message
{
    public RecipientListResponse(Guid correlationId) : base(correlationId) { }
    public string Endpoint { get; set; }
}
</code></pre>

          <h3 id="sending">Sending messages to recipients</h3>

<pre><code class="cs">public class Program
{
    public static void Main()
    {
        var bus = Bus.Initialize();
        var id = Guid.NewGuid();
        bus.Send(
            new List<string>
                {
                    "Consumer1",
                    "Consumer2"
                },
            new RecipientListMessage(id)
        );
    }
}
</code></pre>

            <h3 id="sendingrecievingsynch">Sending messages to recipients and receiving synchronous replies</h3>

<pre><code class="cs">public class Program
{
    public static void Main()
    {
        var bus = Bus.Initialize();
        var id = Guid.NewGuid();
        var responses = bus.SendRequest&lt;recipientlistmessage, recipientlistresponse&gt;(
                       new list<string>
                {
                    "Consumer1",
                    "Consumer2"
                },
            new RecipientListMessage(id)
        );

        foreach (RecipientListResponse response in responses)
        {
            Console.WriteLine("Received response from - {0}", response.Endpoint);
        }
    }
}
</code></pre>

            <h3 id="sendingrecievingasynch">Sending messages to recipients and receiving asynchronous replies</h3>

<pre><code class="cs">public class Program
{
    public static void Main()
    {
        var bus = Bus.Initialize();
        bus.SendRequest&lt;RecipientListMessage, RecipientListResponse&gt;(
            new List<string>
            {
                "Consumer1",
                "Consumer2"
            },
            new RecipientListMessage(id)
            {
                SendReply = true
            },
            r =>
            {
                foreach (RecipientListResponse recipientListResponse in r)
                {
                    Console.WriteLine("Received response from - {0}", recipientListResponse.Endpoint); 
                }
                Console.WriteLine("");
            }
        );
    }
}
</code></pre>

          <h3 id="consuming">Consuming messages</h3>

<pre><code class="cs">public class MyMessageHandler : IMessageHandler&lt;RecipientListMessage&gt;
{
    public void Execute(RecipientListMessage message)
    {
        Console.WriteLine("Consumer 1 Received Message - {0}", message.CorrelationId);

        if (message.SendReply)
        {
            Context.Reply(new RecipientListResponse(message.CorrelationId)
            {
                Endpoint = "Consumer1"
            });
        }
    }

    public IConsumeContext Context { get; set; }
}
</code></pre>

          <p>
          See <a href="https://github.com/R-Suite/R.MessageBus/tree/master/samples/RecipientList">Recipient List</a> sample application for a complete example.
          </p>

        </div>
    </div>
    <div id="telluswhatyouthink" style="padding: 20px;">@Html.Partial("../Home/_chat")</div>
   @Html.Partial("_footer")
</div>