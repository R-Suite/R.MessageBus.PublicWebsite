@{
    ViewBag.Title = "Streaming";
}
<div class="container-fluid">
    <div class="row row-offcanvas row-offcanvas-left">
        <div class="col-xs-6 col-sm-3 sidebar-offcanvas" id="sidebar" role="navigation">
            <div class="well sidebar-nav">
                <ul class="nav nav-list">
                    <li>
                        <a href="#streaming">Message Streaming</a>
                    </li>
                    <li>
                        <a href="#creating">Creating Message Stream</a>
                    </li>
                    <li>
                        <a href="#consuming">Consuming Message Stream</a>
                    </li>
                    <li>
                        <a href="#telluswhatyouthink">Tell Us What You Think!</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-xs-12 col-sm-9">

            <h2 id="streaming">Message Streaming</h2>
            <p style="margin-top:30px;">
                By utilising message streaming, ServiceConnect allows transfering large files or even audio/video streaming between two endpoints.
            </p>

            <h3 id="message">Message Definition</h3>

<pre><code class="cs">public class StartStreamMessage : Message
{
    public StartStreamMessage(Guid correlationId) : base(correlationId)
    {
            
    }
    public string Path { get; set; }
}
</code></pre>
            
                   
            <br />
            <h3 id="creating">Creating Message Stream</h3>
            <p>
                Use the bus to <strong>create a stream object</strong>
            </p>

<pre><code class="cs">var stream = bus.CreateStream("StreamConsumer", new StartStreamMessage(Guid.NewGuid())
{
    Path = "myFileCopy.doc" // destination file path
});
</code></pre>

          <p>
            ...and <strong>write your binary data</strong> to it.
          </p>

<pre><code class="cs">var f = new FileStream("myFile.doc", FileMode.Open);

byte[] buffer = new byte[100000];
int read;
while ((read = f.Read(buffer, 0, buffer.Length)) > 0)
{
    stream.Write(buffer);
}

stream.Close(); //stop sending
</code></pre>

            <br />
            <h3 id="consuming">Consuming Message Stream</h3>

            <pre><code class="cs">public class StreamHandler : IStreamHandler&lt;StartStreamMessage&gt;
{
    public IMessageBusReadStream Stream { get; set; }

    public void Execute(StartStreamMessage message)
    {
        var ms = new FileStream(message.Path, FileMode.Create);
          
        while (!Stream.IsComplete())
        {
            var bytes = Stream.Read();
            if (bytes.Length > 0)
            {
                ms.Write(bytes, 0, bytes.Length);
            }
        }
          
        ms.Close();

        Console.WriteLine("Stream Read - {0}", message.Path);
    }
}
</code></pre>

          <p>
          See <a href="https://github.com/R-Suite/ServiceConnect-CSharp/tree/master/samples/Streaming">Streaming</a> sample application for a complete example.
          </p>

        </div>
    </div>
    <div id="telluswhatyouthink" style="padding: 20px;">@Html.Partial("../Home/_chat")</div>
    @Html.Partial("_footer")
</div>